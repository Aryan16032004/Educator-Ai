import axios from "axios";

// Replace with your actual API key and external user ID
const apiKey = 'vFKHtSB2Ckc0GJaKKUUtrRqjakhsPQ53';
const externalUserId = 'User1';


// const myquery = "Unit I: FINITE AUTOMATA - Definition and description of a finite automaton, deterministic and nondeterministic finite state machines, transition systems, and properties of transition functions, acceptability of a string by a finite automaton, the equivalence of DFA and NDFA, Mealy and Moore machines, minimization of finite automata, basics of strings and alphabets, transition graph and properties of transition functions, regular languages, the equivalence of deterministic and nondeterministic finite automata. Unit II: REGULAR EXPRESSIONS AND REGULAR SETS - Regular expressions and identities for regular expressions, finite automata and regular expressions, transition systems containing null moves, NDFA with null moves and regular expressions, conversion of non-deterministic systems to deterministic systems, algebraic methods using Arden's Theorem, construction of finite automata equivalent to a regular expression, equivalence of two finite automata and two regular expressions, closure properties of regular sets, pumping lemma for regular sets and its application, equivalence between regular languages, construction of finite automata equivalent to a regular expression, properties of regular languages, non-deterministic finite automata with null moves and regular expressions, Myhill-Nerode theorem. Unit III: FORMAL LANGUAGES - Derivations and the language generated by a grammar, definition of a grammar, Chomsky classification of languages, languages and their relation, recursive and recursively enumerable sets, languages and automata, Chomsky hierarchy of languages. REGULAR GRAMMARS - Regular sets and regular grammars, converting regular expressions to regular grammars, converting regular grammars to regular expressions, left linear and right linear regular grammars.";


const queryUpdate = `/n Segregate the following data to include particular topics in each UNIT/n Format of output should be - \"UNIT1*<topic1>*<topic2>*<topic3>^UNIT2*<topic1>*<topic2>*<topic3>\"" `
// const form =document.getElementById("form")

// document.getElementById("submit").addEventListener("click", queryFunction);

// function queryFunction(event){
//     event.preventDefault();
//     myquery = document.getElementById('queryInput');
//     main1();
// }


// Function to create a chat session
async function createChatSession() {
    try {
        const response = await axios.post(
            'https://api.on-demand.io/chat/v1/sessions',
            {
                pluginIds: [],
                externalUserId: externalUserId
            },
            {
                headers: {
                    apikey: apiKey
                }
            }
        );
        return response.data.data.id; // Extract session ID
    } catch (error) {
        console.error('Error creating chat session:', error);
        throw error;
    }
}

// Function to submit a query
async function submitQuery(sessionId,myquery) {
    try {
        const response = await axios.post(
            `https://api.on-demand.io/chat/v1/sessions/${sessionId}/query`,
            {
                endpointId: 'predefined-openai-gpt4o',
                query: `${myquery} ${queryUpdate}`,
                pluginIds: ['plugin-1712327325', 'plugin-1713962163'],
                responseMode: 'sync'
            },
            {
                headers: {
                    apikey: apiKey
                }
            }
        );
        return response.data;
    } catch (error) {
        console.error('Error submitting query:', error);
        throw error;
    }
}

// Main function to execute the API calls
const separator = async (myquery)=> {
    try {
        const sessionId = await createChatSession();
        // console.log('Session ID:', sessionId);
        const queryResponse = await submitQuery(sessionId,myquery);
        // console.log('Query Response:', queryResponse);
        const arr1 = queryResponse.data.answer.split('^');
        // console.log(arr1);
        const result = {};

        arr1.forEach(item => {
            const [unit, ...topics] = item.split('*');
            result[unit.replace(/([A-Z]+)(\d*)/, '$1 $2').trim()] = topics;
        });

        // console.log(result);
        return result
    } catch (error) {
        console.error('Error in main function:', error);
    }
}


// Execute the main function
export {separator}